코딩의 역사- 처음에는 전부 어셈블리어로 작성이 되었다.

어셈블리 어란? 

기계어에서 한 단계 위의 언어이며 기계어와 함께 단 둘 뿐인 저급(Low Level) 언어에 속한다.

그러면 기계어는?

컴퓨터(CPU)가 별다른 해석(컴파일) 없이 읽을 수 있는 프로그래밍 언어. JS가 브라우저를 제어하듯이 기계어는 CPU를 직접 제어한다.
인간의 입장에선 난해한 프로그래밍 언어이지만, 이건 컴퓨터만을 위해 사용되는 언어다.
그러니까 CPU에게 입력했을 때 CPU가 바로 해독할 수 있는 유일한 언어다. 쉽게 말해 모든 프로그래밍 언어의 종착지.

그렇기 때문에 저급언어로 코딩을 하게 된다면
"안녕 100111010을 1011110011 해야하는데 1111001101010 해줄래?"
어렇게 코딩을 짜야하는데,이렇게 코딩을 한다면 아마 개발자를 하는 사람은 엄청 적지 않았을까?
(과거에는 이렇게 했다는 사실이 더 대단하다.)

그래서 사람들이 구안을 해낸것이 바로 고--급언어
그 예로는 Java, C, C++, 베이직 등
인간이 컴퓨터 언어를 작성 할 수 있게 만드는 언어이다.
하지만 인간이 이해하기 때문에 컴퓨터는 이해하지 못한다
(마치 중국인과 미국인이 만나서 서로의 언어로 이야기를 하는 상황)
그래서 우리는 통역사인 컴파일러, 인터프리터가 필요하다.
컴파일러와 인터프리터는 고급언어를 저급언어로 바꿔주어서 컴퓨터가 알아볼 수 있게 만들어준다.

컴파일러는 고급언어를 기계어로 한번에 해석을 해주고

인터프리터는 런타임 이후에 Row 단위로 해석(Interpret) 하며 프로그램을 구동시키는 방식이다.

이해하기 쉽게 설명하자면 
컴파일러는 원어민이 라디오에 녹음한 파일을 듣는거고
인터프리터는 원어민이 한 말을 바로바로 해석해주는 고급 통역가라고 생각하면 된다.
//https://www.youtube.com/watch?v=Dx2tSsd3aFc

그러면 지금 배우고 있는 자바스크립트는 어떤 언어죠?

자바스크립트는 인터프리터 언어입니다. 개발자도구 콘솔에서 스크립트를 작성해 실행하는데 컴파일이 필요하지 않기 때문입니다. 
하지만, 결론부터 이야기하면 자바스크립트도 컴파일 과정을 거칩니다. 
다만 자바스크립트 엔진 내부에서 실행 도중 컴파일이 필요한 경우에 내부에서 컴파일 합니다.
그 경우는 자바스크립트 크롬 V8 엔진의 내부를 알면 됩니다.

자바스크립트의 성능을 비약적으로 향상시킬 수 있었던 이유는 엔진 내부에서 컴파일 과정 거치기 때문입니다. 
엔진이 작동하는 원리는 우선 엔진이 실행할 JS 파일을 받은 후 파싱, AST(Abstract Syntax Tree)를 구축하는 과정을 거칩니다.

다음으로 Interpreter가 코드를 읽으며 실행합니다. 코드를 수행하는 과정에서 프로파일러가 지켜보며 최적화 할 수 있는 코드를 컴파일러에게 전달해줍니다. 
주로 반복해서 실행되는 코드 블록을 컴파일(최적화)합니다.